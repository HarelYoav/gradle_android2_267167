buildscript {
    ext.kotlin_version = '1.8.22'
    repositories {
        maven {
            url 'https://mvnrepository.com/repos/mulesoft-public'
        }
        mavenCentral()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.3.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        //classpath "androidx.navigation:navigation-safe-args-gradle-plugin:2.6.0"
        //classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:4.32.0'
    }
}

plugins {
    //id("com.jfrog.artifactory") version "5.+"
    id "org.ajoberstar.grgit" version "4.1.1"
    id 'net.researchgate.release' version '3.0.2'
    id "org.sonarqube" version "3.5.0.2730"
}

ext {
    git = grgit
    gitAuthorName = git.head().author.name
    gitCommitHash = git.head().id
    gitBranch = git.branch.current().getName()
}

//task clean(type: Delete) {
//    delete rootProject.buildDir
//}

//task build() {
//}

allprojects {
    apply plugin: 'com.jfrog.artifactory'
    apply plugin: 'maven-publish'
    apply plugin: 'idea'

    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }
    repositories {
        maven {
            url 'https://artifactory/artifactory/repo'
        }
        mavenCentral()
        google()
    }
    project.group = 'pl.ppl'

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
        kotlinOptions {
            jvmTarget = "11"
            freeCompilerArgs += ["-Xallow-jvm-ir-dependencies", "-Xskip-prerelease-check"]
        }
    }

    sonarqube {
        def branch = System.getenv("GIT_BRANCH") != null ? System.getenv("GIT_BRANCH").replace("/", "__") : ""
        def projectKey = "${project.name}:${branch}"
        properties {
            property "sonar.host.url", System.getProperty("sonar.host.url")
            property "sonar.jdbc.url", System.getProperty("jdbc")
            property "sonar.jdbc.driverClassName", System.getProperty("sonar.jdbc.driverClassName")
            property "sonar.jdbc.username", System.getProperty("sonar.jdbc.username")
            property "sonar.jdbc.password", System.getProperty("sonar.jdbc.password")
            property "sonar.sourceEncoding", System.getProperty("sonar.sourceEncoding")
            property "sonar.jacoco.itReportPath", System.getProperty("sonar.jacoco.itReportPath")
            property "sonar.projectKey", projectKey
        }
    }

}
subprojects {
    version = rootProject.version
}


project('app') {
    publishing {
        publications {
            apk(MavenPublication) {
                artifact("$buildDir/outputs/apk/real/release/app.apk", {
                    classifier "real-app"
                })
                artifact("$buildDir/outputs/apk/stub/release/app.apk", {
                    classifier "stub-app"
                })
            }
        }
    }

    artifactoryPublish {
        dependsOn('build')
        publications(publishing.publications.apk)
    }
}

project('module1') {
    publishing {
        publications {
            apk(MavenPublication) {
                artifact("$buildDir/outputs/apk/real/release/module1.apk", {
                    classifier "real-app"
                })
                artifact("$buildDir/outputs/apk/stub/release/module1.apk", {
                    classifier "stub-app"
                })
            }
        }
    }

    artifactoryPublish {
        dependsOn('build')
        publications(publishing.publications.apk)
    }
}


artifactory {
    contextUrl = 'http://elinaf.jfrog.io/artifactory'
    publish {
        repository {
            repoKey = project.findProperty('artifactoryRepoKey') ?: 'yoavh-gradle-dev-loca'
            username = 'admin'      //The publisher user name
            password = 'Password1!'       //The publisher password
            maven = true
        }
        defaults {
            publishArtifacts = true
            //publications('apk')
            publishPom = true // Publish generated POM files to Artifactory (true by default)
        }
    }
    clientConfig.setIncludeEnvVars(true)
}
